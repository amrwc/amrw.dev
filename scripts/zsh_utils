#!/usr/bin/env zsh

# Usage:
# source /dev/stdin <<< "$(curl -sL amrw.dev/scripts/zsh_utils)"

############################################
# CONSTANTS                                #
############################################

# Usage:
# printf "${FONT[bold]}${FONT[blue]}Some text${FONT[reset]}\n"
# Source: https://unix.stackexchange.com/a/438357
declare -A FONT=(
	black $(tput setaf 0)
	blue $(tput setaf 12)
	cyan $(tput setaf 6)
	green $(tput setaf 2)
	lime_yellow $(tput setaf 190)
	magenta $(tput setaf 5)
	powder_blue $(tput setaf 153)
	red $(tput setaf 1)
	white $(tput setaf 7)
	yellow $(tput setaf 11)

	bold $(tput bold)
	blink $(tput blink)
	reverse $(tput smso)
	underline $(tput smul)

	reset $(tput sgr0)
)


############################################
# FUNCTIONS                                #
############################################

# @param {string} colour
# @param {string} text
# Usage:
# print_colour <colour_name> <text_to_display>
function print_colour() {
	local colour=${FONT[${1}]}
	if [ -z "${colour}" ]; then
		printf "${FONT[red]}Colour '${1}' is not recognised.${FONT[reset]}\n"
		exit 1
	fi
	printf "${colour}${2}${FONT[reset]}"
}

# @param {string} colour
# @param {string} text
# Usage:
# println_colour <colour_name> <text_to_display>
function println_colour() {
	print_colour "${1}" "${2}\n"
}

# Returns current date and time in 'YYYY-MM-DD_HH:MM:SS' format.
# Usage:
# date_time=$(get_date_time); echo "${date_time}"
function get_date_time() {
	printf "$(date +"%Y-%m-%d_%T")"
}
